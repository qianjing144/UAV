C251 COMPILER V5.60.0,  QMC5883L                                                           10/08/24  08:39:10  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE QMC5883L
OBJECT MODULE PLACED IN .\Objects\QMC5883L.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Code\QMC5883L.c XSMALL ROM(HUGE) BROWSE INCDIR(.\Code;.\Debugware) DEB
                    -UG PRINT(.\Listings\QMC5883L.lst) OBJECT(.\Objects\QMC5883L.obj) 

stmt  level    source

    1          /*
    2           * QMC5883L.c
    3           *
    4           *  Created on: Jul 18, 2024
    5           *      Author: qian-jing
    6           */
    7          
    8          #include "QMC5883L.h"
    9          #ifdef DEBUG
               #include "oled.h"
               #endif
   12          #include <math.h>
   13          #include <stdlib.h>
   14          //L->H 2Byte
   15          #define DATA_OUTPUT_X 0x00
   16          #define DATA_OUTPUT_Y 0x02
   17          #define DATA_OUTPUT_Z 0x04
   18          #define STATUS 0x06
   19          #define DATA_OUTPUT_T 0x07
   20          #define CONTROL1 0x09 //2BYTE
   21          #define CONTROL2 0x0A
   22          #define SR_PERIOD 0x0B //SR:SET_OR_RESET
   23          #define ID 0x0D
   24          
   25          #define CalThreshold 0
   26          #define MAG_DEC 0//磁偏角
   27          
   28          #define M_PI 3.14159265358979323846
   29          
   30          float offsetX=-0.14699;
   31          float offsetY=0.057160;
   32          
   33          static unsigned char write_reg(QMC5883L_t *obj,unsigned char reg,unsigned char *pData,unsigned char amoun
             -t)
   34          {
   35   1              if(i2c_mem_write(obj->devAddr,reg,pData,amount))
   36   1              {
   37   2                      return 1;
   38   2              }
   39   1              return 0;
   40   1      }
   41          
   42          static unsigned char read_reg(QMC5883L_t *obj,unsigned char reg,unsigned char *pData,unsigned char amount
             -)
   43          {
   44   1              if(i2c_mem_read(obj->devAddr,reg,pData,amount))
   45   1              {
   46   2                      return 1;
   47   2              }
   48   1              return 0;
   49   1      }
   50          
   51          unsigned char qmc5883l_init(QMC5883L_t *obj)
   52          {
   53   1              unsigned char pData[1];
   54   1              unsigned char status=0;
   55   1              status=read_reg(obj, ID, pData, 1);
   56   1              if(*pData!=0xFF)
C251 COMPILER V5.60.0,  QMC5883L                                                           10/08/24  08:39:10  PAGE 2   

   57   1              {
   58   2                      return 1;
   59   2              }
   60   1              pData[0]=0x80;
   61   1              if(write_reg(obj, CONTROL2, pData, 1))//RESET
   62   1              {
   63   2                      return 1;
   64   2              }
   65   1              pData[0]=0x1D;//default 0001 1101
   66   1              if(write_reg(obj, CONTROL1, pData, 1))
   67   1              {
   68   2                      return 1;
   69   2              }
   70   1              pData[0]=0x00;//0000 0000
   71   1              if(write_reg(obj, CONTROL2, pData, 1))
   72   1              {
   73   2                      return 1;
   74   2              }
   75   1              pData[0]=0x01;//recommended
   76   1              if(write_reg(obj, SR_PERIOD, pData, 1))
   77   1              {
   78   2                      return 1;
   79   2              }
   80   1              return status;
   81   1      }
   82          
   83          unsigned char qmc5883l_calibrate(QMC5883L_t *obj)
   84          {
   85   1              unsigned char status=0;
   86   1              unsigned char ready_status=0;
   87   1              unsigned char raw[6]={0};
   88   1              float x=0,y=0;
   89   1              float xMin,xMax,yMin,yMax;
   90   1              offsetX=offsetY=0;
   91   1              xMin=xMax=yMin=yMax=0;
   92   1              while(1)
   93   1              {
   94   2                      status=read_reg(obj, STATUS, &ready_status, 1);
   95   2                      if((ready_status&0x01)!=0x01)
   96   2                      {
   97   3                              continue;
   98   3                      }
   99   2                      status=read_reg(obj, DATA_OUTPUT_X, raw, 6);
  100   2                      x=((int)(raw[1]<<8)|raw[0])/3000.0;
  101   2                      y=((int)(raw[3]<<8)|raw[2])/3000.0;
  102   2                      if (x > xMax)
  103   2                              xMax = x;
  104   2                      if (x < xMin )
  105   2                              xMin = x;
  106   2                      if(y > yMax )
  107   2                              yMax = y;
  108   2                      if(y < yMin )
  109   2                              yMin = y;
  110   2      //              if(z > zMax )
  111   2      //                      zMax = z;
  112   2      //              if(z < zMin )
  113   2      //                      zMin = z;
  114   2                      if(fabs(xMax - xMin) > CalThreshold )
  115   2                              offsetX = (xMax + xMin)/2;
  116   2                      if(fabs(yMax - yMin) > CalThreshold )
  117   2                              offsetY = (yMax + yMin)/2;
  118   2                      #ifdef DEBUG
                               OLED_Showdecimal(0, 0, offsetX, 1, 5, 12, 0);
                               OLED_Showdecimal(64, 0, offsetY, 1, 5, 12, 0);
                               OLED_Showdecimal(0, 1, xMax, 1, 5, 12, 0);
                               OLED_Showdecimal(0, 2, yMax, 1, 5, 12, 0);
C251 COMPILER V5.60.0,  QMC5883L                                                           10/08/24  08:39:10  PAGE 3   

                               OLED_Showdecimal(0, 3, xMin, 1, 5, 12, 0);
                               OLED_Showdecimal(0, 4, yMin, 1, 5, 12, 0);
                               #endif
  126   2              }
  127   1      
  128   1      //      if(abs(zMax - zMin) > CalThreshold )
  129   1      //              offsetZ = (zMax +zMin)/2;
  130   1              return status;
  131   1      }
  132          
  133          unsigned char qmc5883l_getHeading(QMC5883L_t *obj,float *heading)
  134          {
  135   1              unsigned char raw[6]={0};
  136   1      //      unsigned char x=0,y=0,z=0;
  137   1              float x=0,y=0;
  138   1              unsigned char status=0;
  139   1              unsigned char ready_status=0;
  140   1              status=read_reg(obj, STATUS, &ready_status, 1);
  141   1              if((ready_status&0x01)!=0x01)
  142   1              {
  143   2                      return 1;
  144   2              }
  145   1              status=read_reg(obj, DATA_OUTPUT_X, raw, 6);
  146   1              x=((int)(raw[1]<<8)|raw[0])/3000.0;
  147   1              y=((int)(raw[3]<<8)|raw[2])/3000.0;
  148   1      //      z=(int)(raw[5]<<8)|raw[4];
  149   1      
  150   1              *heading=atan2(y-offsetY,x-offsetX);
  151   1              if(*heading<0)
  152   1              {
  153   2                      *heading+=2*(float)M_PI;
  154   2              }
  155   1              *heading*=180/M_PI;
  156   1              *heading+=MAG_DEC;
  157   1              if(*heading>360)
  158   1              {
  159   2                      *heading-=360;
  160   2              }
  161   1              return status;
  162   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       885     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         8         51
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        28     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
